---
journald_users:
- 'vagrant'

sshd_allow_users:
- 'vagrant'
- 'ansible@10.*.*.*'
- 'ansible@172.17.*.*'

sshd_allow_tcp_wrappers:
- '10.'
- '172.17.'
- '.jp'

byobu_users:
- 'vagrant'

#authorized_key_file_path: '~/.ssh/id_rsa.pub'
authorized_key_file_path: '~/.ssh/id_ed25519.pub'
authorized_key_options: 'restrict,from="10.0.0.0/8,172.17.0.0/16"'

nadoka:
- service_name: 'fprog'
  irc_host: ''
  irc_port: 6697
  irc_pass: "nil"
  irc_ssl_params: '{}'
  channel_info: "'#private' => { key: 'channelkey' }"
  more_config: |
    if system('docker', 'ps', %i[out err]=>File::NULL)
      require 'open3'
      BotConfig << {
        :name => :WatchBot,
        :channels => %w"#docker",
        :command => proc {
          out, status = Open3.capture2e('docker', 'ps', '--format', "{\{.ID\}}\\t{\{.CreatedAt\}}\\t{\{.Image\}}\\t{\{.Names\}}\\t{\{.Command\}}")
          out = out.split(/\n/)
          unless status.success?
            out << status.inspect
          end
          out
        },
        :min_interval => 60,
      }
    end

#postfix_relay_smtp_server: 'smtp.example.com'
#postfix_relay_smtp_user: 'smtpuser'
#postfix_relay_smtp_pass: 'smtppass'

ntp_servers:
- ntp1.jst.mfeed.ad.jp
- ntp2.jst.mfeed.ad.jp
- ntp3.jst.mfeed.ad.jp
ntp_peers:
- 10.0.0.10
- 10.0.0.11
- 10.0.0.12
- 10.0.0.9

docker_ce_channel: "stable"

stage_etc_hosts:
- regexp: '^10\.0\.0\.10 '
  line: '10.0.0.10 gitlab.example.test gitlab0 registry.example.test mattermost.example.test'
- regexp: '^10\.0\.0\.11 '
  line: '10.0.0.11 gitlab-runner1.example.test gitlab-runner1'
- regexp: '^10\.0\.0\.12 '
  line: '10.0.0.12 gitlab-runner2.example.test gitlab-runner2'
- regexp: '^10\.0\.0\.9 '
  line: '10.0.0.9 dokku0.example.test dokku0'

stage_gitlab_omnibus_config: |
  gitlab_rails['time_zone'] = 'Asia/Tokyo'

  base_domain = 'example.test'
  gitlab_domain = "gitlab.#{base_domain}"
  registry_domain = "registry.#{base_domain}"
  mattermost_domain = "mattermost.#{base_domain}"

  if File.exist?("/etc/letsencrypt/live/#{gitlab_domain}/fullchain.pem")
    external_url "https://#{gitlab_domain}"
    nginx['redirect_http_to_https'] = true
    nginx['ssl_certificate'] = "/etc/letsencrypt/live/#{gitlab_domain}/fullchain.pem"
    nginx['ssl_certificate_key'] = "/etc/letsencrypt/live/#{gitlab_domain}/privkey.pem"
  else
    external_url "http://#{gitlab_domain}"
  end
  nginx['custom_gitlab_server_config'] = 'location ^~ /.well-known { root /var/www/letsencrypt; }'

  if File.exist?("/etc/letsencrypt/live/#{registry_domain}/fullchain.pem")
    registry_external_url "https://#{registry_domain}"
    registry_nginx['port'] = 443
    registry_nginx['redirect_http_to_https'] = true
    registry_nginx['ssl_certificate'] = "/etc/letsencrypt/live/#{registry_domain}/fullchain.pem"
    registry_nginx['ssl_certificate_key'] = "/etc/letsencrypt/live/#{registry_domain}/privkey.pem"
  else
    registry_external_url "http://#{registry_domain}"
  end
  registry_nginx['custom_gitlab_server_config'] = 'location ^~ /.well-known { root /var/www/letsencrypt; }'

  if File.exist?("/etc/letsencrypt/live/#{mattermost_domain}/fullchain.pem")
    mattermost_scheme = "https"
    mattermost_port = 443
    mattermost_external_url "#{mattermost_scheme}://#{mattermost_domain}"
    mattermost_nginx['redirect_http_to_https'] = true
    mattermost_nginx['ssl_certificate'] = "/etc/letsencrypt/live/#{mattermost_domain}/fullchain.pem"
    mattermost_nginx['ssl_certificate_key'] = "/etc/letsencrypt/live/#{mattermost_domain}/privkey.pem"
    mattermost['service_use_ssl'] = true
  else
    mattermost_scheme = "http"
    mattermost_port = 80
    mattermost_external_url "#{mattermost_scheme}://#{mattermost_domain}"
  end
  mattermost_nginx['custom_gitlab_mattermost_server_config'] = 'location ^~ /.well-known { root /var/www/letsencrypt; }'
  # required by Email Batching
  #mattermost['service_site_url'] = "#{mattermost_scheme}://#{mattermost_domain}:#{mattermost_port}"
  # port causes Bad token type error https://github.com/mattermost/platform/issues/6489
  mattermost['service_site_url'] = "#{mattermost_scheme}://#{mattermost_domain}"

  # GitLab user privileges
  gitlab_rails['gitlab_default_can_create_group'] = false
  gitlab_rails['gitlab_username_changing_enabled'] = false

  # Default project feature settings
  gitlab_rails['gitlab_default_projects_features_issues'] = false
  gitlab_rails['gitlab_default_projects_features_merge_requests'] = false
  gitlab_rails['gitlab_default_projects_features_wiki'] = false
  gitlab_rails['gitlab_default_projects_features_snippets'] = false
  gitlab_rails['gitlab_default_projects_features_builds'] = false
  gitlab_rails['gitlab_default_projects_features_container_registry'] = false

  # https://docs.gitlab.com/omnibus/settings/smtp.html
  gitlab_rails['smtp_enable'] = true
  gitlab_rails['smtp_address'] = 'smtp.example.com'
  gitlab_rails['smtp_port'] = 465
  gitlab_rails['smtp_user_name'] = 'username'
  gitlab_rails['smtp_password'] = 'password'
  gitlab_rails['smtp_tls'] = true

  mattermost['env'] = {}

  mattermost['env']['MM_EMAILSETTINGS_ENABLESIGNINWITHEMAIL'] = 'false' # gitlab accounts only
  mattermost['env']['MM_EMAILSETTINGS_ENABLESIGNUPWITHEMAIL'] = 'false' # default
  mattermost['env']['MM_EMAILSETTINGS_SENDEMAILNOTIFICATIONS'] = 'true'
  mattermost['env']['MM_EMAILSETTINGS_ENABLESMTPAUTH'] = 'true'
  mattermost['env']['MM_EMAILSETTINGS_SMTPUSERNAME'] = 'username'
  mattermost['env']['MM_EMAILSETTINGS_SMTPPASSWORD'] = 'password'
  mattermost['env']['MM_EMAILSETTINGS_SMTPSERVER'] = 'smtp.example.com'
  mattermost['env']['MM_EMAILSETTINGS_SMTPPORT'] = '465'
  mattermost['env']['MM_EMAILSETTINGS_CONNECTIONSECURITY'] = 'TLS'
  mattermost['env']['MM_EMAILSETTINGS_FEEDBACKNAME'] = 'GitLab Mattermost'
  mattermost['env']['MM_EMAILSETTINGS_FEEDBACKEMAIL'] = 'email@example.com'
  mattermost['env']['MM_EMAILSETTINGS_ENABLEEMAILBATCHING'] = 'true'
  mattermost['env']['MM_SUPPORTSETTINGS_SUPPORTEMAIL'] =  'support@example.com'

  mattermost['env']['MM_LOCALIZATIONSETTINGS_DEFAULTSERVERLOCALE'] = 'ja'
  mattermost['env']['MM_LOCALIZATIONSETTINGS_DEFAULTCLIENTLOCALE'] = 'ja'

  mattermost['env']['MM_SERVICESETTINGS_ENABLEINCOMINGWEBHOOKS'] = 'true'

  mattermost['env']['MM_TEAMSETTINGS_ENABLETEAMCREATION'] = 'false'
  mattermost['env']['MM_TEAMSETTINGS_ENABLEUSERCREATION'] = 'true' # default, required by GitLab SSO
  mattermost['env']['MM_TEAMSETTINGS_RESTRICTCREATIONTODOMAINS'] = 'example.com'

  pages_external_url 'http://10.0.0.10.nip.io'

  eval(File.read('/etc/gitlab/local.rb')) if File.exist?('/etc/gitlab/local.rb')

stage_gitlab_runner_docker_daemon_config:
  insecure-registries:
  - "registry.example.test"
stage_gitlab_runner_coordinator_url: "http://gitlab.example.test/"
stage_gitlab_runner_register_options: >-
  --docker-volumes /var/run/docker.sock:/var/run/docker.sock
stage_gitlab_runner_tags:
- docker
- vagrant
stage_gitlab_runner_concurrent: 2

stage_docker_dns:
  gitlab-runner1:
  - '10.0.0.11'
  gitlab-runner2:
  - '10.0.0.12'
  dokku0:
  - '10.0.0.9'

stage_dokku_daemon_config:
  bip: "172.31.0.1/16"
stage_dokku_hostname: "10.0.0.9.nip.io"
stage_dokku_skip_key_file: "false"
stage_dokku_key_file: "/home/vagrant/.ssh/authorized_keys"
stage_dokku_plugin:
- name: postgres
  url: https://github.com/dokku/dokku-postgres.git
- name: apt
  url: https://github.com/F4-Group/dokku-apt
